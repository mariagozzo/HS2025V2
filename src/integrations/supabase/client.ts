
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zjvieilnhyfryhszgvtb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpqdmllaWxuaHlmcnloc3pndnRiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY0NTg2MTMsImV4cCI6MjA2MjAzNDYxM30.gdGY8Up5gWm21e3CXWrZ50420NnhZYbp6DM1HdKJMMo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create an untyped client that can be used directly when types are not important
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function that works around type issues using type assertion
export const fromTable = (tableName: string) => {
  return supabase.from(tableName as never) as any;
};

// Helper for specific tables with explicit type casting to overcome type checking issues
export const fromPolicies = () => supabase.from('policies' as never) as any;
export const fromClients = () => supabase.from('clients' as never) as any;
export const fromTasks = () => supabase.from('tasks' as never) as any;
export const fromPayments = () => supabase.from('payments' as never) as any;
export const fromClaims = () => supabase.from('claims' as never) as any;
export const fromInvoices = () => supabase.from('invoices' as never) as any;
export const fromInsuranceCompanies = () => supabase.from('insurance_companies' as never) as any;
export const fromInsuranceBranches = () => supabase.from('insurance_branches' as never) as any;
export const fromUsersProfiles = () => supabase.from('users_profiles' as never) as any;

// Funciones auxiliares para operaciones comunes
export const countRecords = async (tableName: string, condition?: {column: string, value: any}) => {
  let query = fromTable(tableName).select('*', { count: 'exact', head: true });
  
  if (condition) {
    query = query.eq(condition.column, condition.value);
  }
  
  const { count, error } = await query;
  
  if (error) throw error;
  return count || 0;
};
